struct node{
	long long  s, e, m, sum, add_val, set_val;
	bool lset;
	node *l, *r;
	node(long long  _s, long long  _e){
		s=_s;
		e=_e;
		m=(s+e)/2;
		sum=0;
		if (s==e) return;
		l=new node(s,m);
		r=new node(m+1, e);
	}
	void lazy_propagate() {
        if (s == e) return;
        if (lset) {
            l->self_set(set_val), r->self_set(set_val);
            lset = set_val = 0;
        }  
        if (add_val != 0) {
            l->self_add(add_val), r->self_add(add_val);
            add_val = 0;
        }
    }
    void self_set(long long v) {
        lset = 1;
        set_val = v;
        sum = v * (e-s+1);
        add_val = 0;
    }
	void self_add(long long v) {
        add_val += v;
        sum += v*(e-s+1);
    }
	void add(long long x, long long y, long long v) {
        if (s == x && e == y) { self_add(v); return; }
        long long m = (s+e)>>1;lazy_propagate();
        if (x <= m) l->add(x, min(y, m), v);
        if (y > m) r->add(max(x, m+1), y, v);
        sum=l->sum+r->sum;
    }
    void set(int x, int y, long long v) {
        if (s == x && e == y) { self_set(v); return; }
        int m = (s+e)>>1;
        lazy_propagate();
        if (x <= m) l->set(x, min(y, m), v);
        if (y > m) r->set(max(x, m+1), y, v);
        sum=l->sum+r->sum;
    }
    long long range_sum(long long x, long long y) {
        if (s == x && e == y) return sum;
        if (l == NULL || lset) return (sum / (e-s+1)) * (y-x+1);
        long long m = (s+e)>>1;
        lazy_propagate();
        if (y <= m) return l->range_sum(x, y);
        if (x > m) return r->range_sum(x, y);
        return l->range_sum(x, m) + r->range_sum(m+1, y);
    }
} *root;
