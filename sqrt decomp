#include<bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define pii pair<int,int>
#define pll pair<long long,long long>
#define pb push_back
#define debug(x) cout<<#x<<"="<<x<<endl
#define pq priority_queue
#define inf 1ll<<60
#define rep(i,a,b) for (int i=a;i<(b);i++)
#define MP make_pair
#define SZ(x) (int(x.size()))
#define ll long long
#define mod 1000000007
#define ALL(x) x.begin(),x.end()
#define endl "\n"
void inc(ll &a,ll b) {a=(a+b)%mod;}
void dec(ll &a,ll b) {a=(a-b+mod)%mod;}
int lowbit(ll x) {return x&(-x);}
ll p0w(ll base,ll p) {ll ret=1;while(p>0){if (p%2ll==1ll) ret=ret*base%mod;base=base*base%mod;p/=2ll;}return ret;}


const ll maxn=1e6+5;
const ll maxm=1005;

ll l[maxn],r[maxn],belong[maxn],a[maxn];
ll lazy[maxm],sum[maxm];
ll len,tot,n,m;

void init(){
	len=sqrt(n);
	tot=(n-1)/len+1;
	rep(i,1,tot+1){ //start and end points of each block
		l[i]=r[i-1]+1;
		r[i]=i*len;
	}
	r[tot]=n;
	rep(i,1,tot+1){
		rep(j,l[i],r[i]+1){
			belong[j]=i;
			sum[i]+=a[j]; // sum of each block
		}
	}
}

void update(ll ql,ll qr,ll k){
	ll cl=belong[ql],cr=belong[qr];
	if(cl==cr){
		sum[cl]+=(qr-ql+1)*k;
		rep(i,ql,qr+1)a[i]+=k;
		return;
	}
	rep(i,ql,r[cl]+1){
		sum[cl]+=k;
		a[i]+=k;
	}
	rep(i,cl+1,cr){
		lazy[i]+=k;
	}
	rep(i,l[cr],qr+1){
		sum[cr]+=k;
		a[i]+=k;
	}
}


ll query(ll ql,ll qr){
    ll ans=0;
	ll cl=belong[ql],cr=belong[qr];
	if(cl==cr){
		rep(i,ql,qr+1)ans+=a[i];
		ans+=lazy[cl]*(qr-ql+1);
		return ans;
	}
	rep(i,ql,r[cl]+1){
		ans+=a[i];
		ans+=lazy[cl];
	}
	rep(i,cl+1,cr){
		ans+=sum[i];
		ans+=lazy[i]*len;
	}
	rep(i,l[cr],qr+1){
		ans+=a[i];
		ans+=lazy[cr];
	}
	return ans;
}

int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin>>n>>m;
    rep(i,1,n+1)cin>>a[i];
    init();
    while(m--){
		ll op;cin>>op;
		if(op==1){
			ll x,y,k;cin>>x>>y>>k;
			update(x,y,k);
		}else{
			ll x,y;cin>>x>>y;
			cout<<query(x,y)<<endl;
		}
	}
    return 0;
}
