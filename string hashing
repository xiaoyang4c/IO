long long compute_hash(string const& s) {
    const int p = 31; //about the same as the number of different characters for the string
    const int m = 1e9 + 9;
    long long hash_value = 0;
    long long p_pow = 1;
    for (char c : s) {
        hash_value = (hash_value + (c - 'a' + 1) * p_pow) % m;
        p_pow = (p_pow * p) % m;
    }
    return hash_value;
}
//depending on context can precompute the hash values and pow values
//prefix sums of hash idea, no need mod inverse
//idea: number of distinct permutations of N which appear as a substring of H at least once
rep(i,0,m-n+1){
		bool same=1;
		rep(j,0,26){
			if(cnt1[j]!=cnt2[j])same=false;
		}
		if(same){
			ll curr_h=0;
			inc(curr_h,h[i+n]);
			dec(curr_h,h[i]);
			curr_h=(curr_h*p_pow[m-i-1])%mod;
			if(f[curr_h]==0)ans++;
			f[curr_h]++;
		}
		cnt2[int(M[i]-'a')]--;
		cnt2[int(M[i+n]-'a')]++;
}
