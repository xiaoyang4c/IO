long long compute_hash(string const& s) {
    const int p = 31; //about the same as the number of different characters for the string
    const int m = 1e9 + 9;
    long long hash_value = 0;
    long long p_pow = 1;
    for (char c : s) {
        hash_value = (hash_value + (c - 'a' + 1) * p_pow) % m;
        p_pow = (p_pow * p) % m;
    }
    return hash_value;
}

//prefix sums of hash idea, no need mod inverse
//idea: number of distinct permutations of N which appear as a substring of H at least once
p_pow[0] = 1;
rep(i,1,m+1)p_pow[i] = (p_pow[i - 1] * p) % mod;
rep(i,0,m+5)h[i+1]=(h[i]+(M[i]-'a'+1)*p_pow[i])%mod;
rep(i,0,m-n+1){
		bool same=1;
		rep(j,0,26){
			if(cnt1[j]!=cnt2[j])same=false;
		}
		if(same){
			ll curr_h=0;
			inc(curr_h,h[i+n]);
			dec(curr_h,h[i]);
			curr_h=(curr_h*p_pow[m-i-1])%mod;
			if(f[curr_h]==0)ans++;
			f[curr_h]++;
		}
		cnt2[int(M[i]-'a')]--;
		cnt2[int(M[i+n]-'a')]++;
}


//if all fails use this
class HashedString {
  private:
	// change M and B if you want
	static const ll M = (1LL << 61) - 1;
	static const ll B;

	// pow[i] contains B^i % M
	static vector<ll> pow;

	// p_hash[i] is the hash of the first i characters of the given string
	vector<ll> p_hash;

	__int128 mul(ll a, ll b) { return (__int128)a * b; }
	ll mod_mul(ll a, ll b) { return mul(a, b) % M; }

  public:
	HashedString(const string &s) : p_hash(s.size() + 1) {
		while (pow.size() < s.size()) { pow.push_back(mod_mul(pow.back(), B)); }
		p_hash[0] = 0;
		for (int i = 0; i < s.size(); i++) {
			p_hash[i + 1] = (mul(p_hash[i], B) + s[i]) % M;
		}
	}

	ll getHash(int start, int end) {
		ll raw_val =
		    p_hash[end + 1] - mod_mul(p_hash[start], pow[end - start + 1]);
		return (raw_val + M) % M;
	}
};
