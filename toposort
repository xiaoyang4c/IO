vector<int>alist[100000];
int visited[100000];
vector<int>topo;
void dfs(int v){
  visited[v]=true;
  for(auto x: alist[v]){
    if(!visited[x]){
      dfs(x);
    }
  }
  topo.pb(v);
}
void topsort(){
  memset(visited,0,sizeof visited);
  rep(i,0,n){
    if(!visited[i])dfs(i);
  }
  reverse(ALL(topo));
}
//to check if possible:
rep(i,0,n)id[topo[i]]=i;
rep(i,1,n+1){
	for(auto x:edge[i]){
		if(id[x]<=id[i]){
			cout<<"IMPOSSIBLE";
			return 0;
		}
	}
}
