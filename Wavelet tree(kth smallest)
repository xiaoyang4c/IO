#include<bits/stdc++.h>
using namespace std;

#define fi first
#define se second
#define pii pair<int,int>
#define pll pair<long long,long long>
#define pb push_back
#define debug(x) cerr<<#x<<"="<<x<<endl
#define pq priority_queue
#define inf (1ll<<60)
#define rep(i,a,b) for (int i=a;i<(b);i++)
#define MP make_pair
#define SZ(x) (int(x.size()))
#define ll long long
#define mod 1000000007
#define ALL(x) x.begin(),x.end()
#define endl "\n"
void inc(int &a,int b) {a=(a+b)%mod;}
void dec(int &a,int b) {a=(a-b+mod)%mod;}
int lowbit(int x) {return x&(-x);}
ll expo(ll base,ll p) {ll ret=1;while(p>0){if (p%2ll==1ll) ret=ret*base%mod;base=base*base%mod;p/=2ll;}return ret;}

const ll maxn=111111;
ll n,p;
struct node
{
    int num[maxn],cnt[maxn];
    //num,该层储存的数组
    //cnt[i]表示此层i节点向左有多少数值进入左子树
} tree[20];//tree[deep]代表深度为deep的那一层
int sorted[maxn],ans;
void build(int t,int L,int R)
{
    if (L==R)
        return;
    int mid=(L+R)>>1,key=sorted[mid],scnt=mid-L+1,i;
    for(i=L; i<=R; ++i)
        if(tree[t].num[i]<key)
            --scnt;//计算有多少等于sort[mid]的元素要进入左子树
    int l=L-1,r=mid,cnt=0;
    for (i=L; i<=R; ++i)
    {
        int num=tree[t].num[i];
        if (num < key || (num == key && scnt))
        {
            //把小于等于key的数放入左树，否则放入右树
            if (num == key)
                --scnt;
            ++cnt;
            tree[t+1].num[++l]=num;
        }
        else
            tree[t+1].num[++r]=num;
        tree[t].cnt[i]=cnt;
        //记录当前放入左树的数的个数
    }
    build(t+1,L,mid);
    build(t+1,mid+1,R);
}
void query(int t,int L,int R,int l,int r,int k)
{
    if (L==R)
    {
        ans=tree[t].num[L];
        return;
    }
    int mid=(L+R)>>1,left=0,sum_l=tree[t].cnt[r],new_l,new_r;
    if (L != l)
    {
        left=tree[t].cnt[l-1];
        sum_l-=left;
    }
    if (sum_l >= k)
    {
        new_l=L+left;
        new_r=new_l+sum_l-1;
        query(t+1,L,mid,new_l,new_r,k);
    }
    else
    {
        new_l=mid+1+l-L-left;
        new_r=new_l+r-l-sum_l;
        query(t+1,mid+1,R,new_l,new_r,k-sum_l);
    }
}
int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	cin>>n>>p;
	rep(i,1,n+1){
		cin>>tree[0].num[i];
		sorted[i]=tree[0].num[i];
	}
	sort(sorted+1,sorted+n+1);
	build(0,1,n);
	while(p--){
		ll l,r,k;cin>>l>>r>>k;
		//k=r-l+2-k; do this to find kth largest 
		query(0,1,n,l,r,k);
		cout<<ans<<endl;
	}
	
	return 0;
}
/**/
// or funni code that is slower 
const ll maxn=1e5+5;
vector<ll>tree[maxn<<2];
ll a[maxn];
vector<ll>combine(vector<ll>a,vector<ll>b){
    ll p=0,pp=0;
    vector<ll>ret;
    while(p<SZ(a) and pp<SZ(b)){
        if(a[p]<b[pp]){
            ret.pb(a[p]);p++;
        }else{
            ret.pb(b[pp]);pp++;
        }
    }
    if(pp==SZ(b)){
        rep(i,p,SZ(a))ret.pb(a[i]);
    }else{
        rep(i,pp,SZ(b))ret.pb(b[i]);
    }
    return ret;
}
void build(ll c,ll cl,ll cr){
	if(cl==cr){
		tree[c].pb(a[cl]);
		return;
	}
	ll mid=cl+cr>>1;
	build(c<<1,cl,mid);
	build(c<<1|1,mid+1,cr);
	tree[c]=combine(tree[c<<1],tree[c<<1|1]);
}
ll query(ll c,ll cl,ll cr,ll l,ll r,ll k){
	if(r<cl or l>cr)return 0;
	if(l<=cl and cr<=r){
		return lower_bound(ALL(tree[c]),k)-tree[c].begin();
	}
	ll mid=cl+cr>>1;
	ll ret=0;
	if(l<=mid)ret+=query(c<<1,cl,mid,l,r,k);
	if(r>mid)ret+=query(c<<1|1,mid+1,cr,l,r,k);
	return ret;
}
int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	ll n,p;cin>>n>>p;
	rep(i,0,n)cin>>a[i];
	build(1,0,n-1);	
	while(p--){
		ll l,r,k;cin>>l>>r>>k;
		l--;r--;
		//k=r-l+1-k;// change largest to smallest
		ll lo=0,hi=1e9+1;// guess an element
		while(lo<hi){
			ll mid=lo+hi+1>>1;
			//check the position of the element in the range
			if(query(1,0,n-1,l,r,mid)<=k)lo=mid;
			else hi=mid-1;
		}
		cout<<lo<<endl;
	}
	return 0;
}
