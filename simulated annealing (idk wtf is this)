mt19937 rng(chrono::system_clock::now().time_since_epoch().count());
int st=clock();
long double alpha=0.9999,temp=2.5;

ll toll(string s){
	ll p=1;
	ll ans=0;
	for(int i=s.size()-1;i>=0;i--){
		ans+=(s[i]-'0')*p;
		p*=10;
	}
	return ans;
}
string a,b;
string adj(string s){
	int i=rng()%s.size();
	int j=rng()%s.size();
	swap(s[i],s[j]);
	while(toll(s)>toll(b)){
		i=rng()%s.size();
		j=rng()%s.size();
		swap(s[i],s[j]);
	}
	return s;
}

bool accept(int newEnergy, int oldEnergy) {
	if (newEnergy >= oldEnergy) {
		return 1;
	}
	uniform_real_distribution<long double> dist;
	return dist(rng) < exp((newEnergy - oldEnergy) / temp);
}

void solve(){
	cin>>a>>b;
	string best=a,curr=a;
	while(clock()-st<0.95*CLOCKS_PER_SEC){
		string next=adj(curr);
		//debug(curr);
		ll curr_val=toll(curr);
		ll new_val=toll(next);
		if(curr_val>=toll(best)){
			best=curr;
		}
		if(accept(new_val,curr_val)){
			curr=next;
		}
		temp*=alpha;
		//debug(temp);
		debug(toll(best));
	}
	cout<<best<<endl;
}
int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	solve();
	return 0;
}
//template 
Let s = random(state) //get's any random valid state
Let best = s
while elapsed_time() <= time_limit:
    Let t = temperature(elapsed_time()/time_limit) //returns temperature given the percent done
    Let next = neighbor(s) //neighbor of a state
    if value(s) < value(best):
        best = s
    if P(value(s), value(next), t) >= random(0, 1): //P -> probability of acceptance function, returns the probability that you'll move to the next state given the value's and the current temperature
        s = next

print(value(best))
