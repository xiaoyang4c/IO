struct line{
    ll m, c;
    line(): m(0), c(-4e18){}
    line(ll m, ll c): m(m), c(c){}
    ll operator()(ll x){return m*x+c;}
    bool operator==(line y){return m==y.m && c==y.c;}
};
struct node{
    int s, e, m; // note for li chao, it should be [s, e)
    line sth; // line that maximises at m.
    node *l, *r;
    node(int s, int e): s(s), e(e), m((s+e)>>1), l(nullptr), r(nullptr){}
    void create(){
        if (l != nullptr) return;
        l = new node(s, m);
        r = new node(m, e);
    }
    void update(line nl){
        bool lft = nl(s) > sth(s), mid = nl(m) > sth(m), rgt = nl(e) > sth(e);
        if (mid) swap(nl, sth);
        if (e - s == 1 || nl == line() || lft == rgt) return;
        create();
        if (lft != mid) l->update(nl); // intersection at left half
        else r->update(nl); // intersection at right half
    }
    ll query(int x){
        if (e-s==1) return sth(x);
        if (l == nullptr) return sth(x);
        if (x < m) return max(sth(x), l->query(x));
        else return max(sth(x), r->query(x));
    }
} *root;

root=new node(-1e9,1e9+1);
